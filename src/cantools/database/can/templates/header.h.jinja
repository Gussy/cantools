/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version {{ version }} {{ date }}.
 */

#ifndef {{ database_name|upper }}_H
#define {{ database_name|upper }}_H

#ifdef __cplusplus
extern "C" {{ '{{' }}
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
{%- for f in frame_defines %}
#define {{ database_name|upper }}_{{ f.snake_name|upper }}_FRAME_ID (0x{{ '%02x'|format(f.message.frame_id) }}u)
{%- endfor %}

/* Frame lengths in bytes. */
{%- for f in frame_defines %}
#define {{ database_name|upper }}_{{ f.snake_name|upper }}_LENGTH ({{ f.message.length }}u)
{%- endfor %}

/* Extended or standard frame types. */
{%- for f in frame_defines %}
#define {{ database_name|upper }}_{{ f.snake_name|upper }}_IS_EXTENDED ({{ f.message.is_extended_frame|int }})
{%- endfor %}

/* Frame cycle times in milliseconds. */
{%- for f in frame_defines %}
{%- if f.message.cycle_time is not none %}
#define {{ database_name|upper }}_{{ f.snake_name|upper }}_CYCLE_TIME_MS ({{ f.message.cycle_time }}u)
{%- endif %}
{%- endfor %}

/* Signal choices. */
{%- for f in frame_defines %}
{%- for s in f.cg_signals %}
{%- if s.signal.conversion.choices is not none %}
{%- for value, name in s.unique_choices.items()|sort %}
#define {{ database_name|upper }}_{{ f.snake_name|upper }}_{{ s.signal.name|upper }}_{{ name }}_CHOICE ({{ value }}{{ 'u' if not s.signal.is_signed else '' }})
{%- endfor %}
{%- endif %}
{%- endfor %}
{%- endfor %}

/* Frame Names. */
{%- for f in frame_defines %}
#define {{ database_name|upper }}_{{ f.snake_name|upper }}_NAME "{{ f.message.name }}"
{%- endfor %}

/* Signal Names. */
{%- for f in frame_defines %}
{%- for s in f.cg_signals %}
#define {{ database_name|upper }}_{{ f.snake_name|upper }}_{{ s.snake_name|upper }}_NAME "{{ s.signal.name }}"
{%- endfor %}
{%- endfor %}

{% for s in structs -%}
/**
 * Signals in message {{ s.database_message_name }}.
 *
 * {{ s.comment }}
 *
 * All signal values are as on the CAN bus.
 */
struct {{ database_name }}_{{ s.message_name }}_t {
{%- if s.members|length == 0 %}
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
{%- else %}
{%- for m in s.members %}
    /**
{{ m.comment|wordwrap(72)|prefix_lines('     * ')  }}
     *
     * Range: {{ m.range }}
     * Scale: {{ m.scale }}
     * Offset: {{ m.offset }}
     */
    {{ m.type_name }} {{ m.name }}{{ m.length }};
{% endfor -%}
{% endif -%}
};

{% endfor -%}
{% for d in declarations %}
{%- if d.sender -%}
/**
 * Pack message {{ d.database_message_name }}.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int {{ database_name }}_{{ d.message_name }}_pack(
    uint8_t *dst_p,
    const struct {{ database_name }}_{{ d.message_name }}_t *src_p,
    size_t size);
{% endif -%}
{%- if d.receiver %}
/**
 * Unpack message {{ d.database_message_name }}.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int {{ database_name }}_{{ d.message_name }}_unpack(
    struct {{ database_name }}_{{ d.message_name }}_t *dst_p,
    const uint8_t *src_p,
    size_t size);
{% endif %}
/**
 * Init message fields to default values from {{ d.database_message_name }}.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int {{ database_name }}_{{ d.message_name }}_init(struct {{ database_name }}_{{ d.message_name }}_t *msg_p);
{% for s in d.signal_declarations -%}
{%- if d.floating_point_numbers %}
{% if d.sender -%}
/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
{{ s.type_name }} {{ database_name }}_{{ d.message_name }}_{{ s.signal_name }}_encode({{ s.floating_point_type }} value);
{% endif -%}
{%- if d.node_name is none or d.receiver %}
/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
{{ s.floating_point_type }} {{ database_name }}_{{ d.message_name}}_{{ s.signal_name }}_decode({{ s.type_name }} value);
{% endif -%}
{% endif %}
/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool {{ database_name }}_{{ d.message_name }}_{{ s.signal_name }}_is_in_range({{ s.type_name }} value);

{% endfor -%}
{% endfor -%}
#ifdef __cplusplus
{{ '}}' }}
#endif

#endif
